import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from openai import AsyncOpenAI

TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
GPT_API_KEY = "YOUR_OPENAI_API_KEY"
OWNER_ID = YOUR_TELEGRAM_ID  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
POST_CHANNEL_ID = "@your_post_channel"  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
db_channels = set()  # –•—Ä–∞–Ω–∏–º ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()
gpt_client = AsyncOpenAI(api_key=GPT_API_KEY)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def rephrase_text(text):
    """ –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é GPT. """
    response = await gpt_client.completions.create(
        model="gpt-4",
        prompt=f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –∏ –¥–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏: {text}",
        max_tokens=200
    )
    return response.choices[0].text.strip()

@dp.message(Command("add"))
async def add_channel(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
    
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞.")
    
    channel_id = args[1]
    db_channels.add(channel_id)
    await message.reply(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!")

@dp.message(Command("remove"))
async def remove_channel(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
    
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @—é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞.")
    
    channel_id = args[1]
    if channel_id in db_channels:
        db_channels.remove(channel_id)
        await message.reply(f"üóë –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª—ë–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
    else:
        await message.reply("‚ùå –¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

@dp.message(Command("channel"))
async def list_channels(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
    
    if not db_channels:
        await message.reply("üì≠ –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
    else:
        channels_list = "\n".join(db_channels)
        await message.reply(f"üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n{channels_list}")

@dp.message(Command("resend"))
async def change_post_channel(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
    
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π.")
    
    global POST_CHANNEL_ID
    POST_CHANNEL_ID = args[1]
    await message.reply(f"‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ {POST_CHANNEL_ID}")

async def handle_new_post(post):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤. """
    text = post.text or post.caption or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{post.message_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="decline")]
    ])
    
    await bot.send_message(OWNER_ID, f"üì© –ù–æ–≤—ã–π –ø–æ—Å—Ç:\n\n{text}", reply_markup=keyboard)

@dp.callback_query()
async def handle_callback(call: types.CallbackQuery):
    if call.data.startswith("approve_"):
        post_id = call.data.split("_")[1]
        
        message = await bot.forward_message(OWNER_ID, POST_CHANNEL_ID, post_id)
        rephrased_text = await rephrase_text(message.text)
        
        await bot.send_message(POST_CHANNEL_ID, f"‚ú® {rephrased_text}")
        await call.message.edit_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

    elif call.data == "decline":
        await call.message.edit_text("‚ùå –ü–æ—Å—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

async def main():
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
