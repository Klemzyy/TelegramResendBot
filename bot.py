import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
import openai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")  # –¢–≤–æ–π Telegram —Ç–æ–∫–µ–Ω
GPT_API_KEY = os.getenv("GPT_API_KEY")  # API –∫–ª—é—á OpenAI
OWNER_ID = int(os.getenv("OWNER_ID"))  # –¢–≤–æ–π Telegram ID
POST_CHANNEL_ID = os.getenv("POST_CHANNEL_ID")  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
WEBHOOK_HOST = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}"
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
PORT = int(os.getenv("PORT", 5000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
openai.api_key = GPT_API_KEY

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
channels = set()
publish_channel = POST_CHANNEL_ID  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add, /remove, /channels, /resend.")

# –ö–æ–º–∞–Ω–¥–∞ /add (–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª)
@dp.message_handler(commands=["add"])
async def add_channel(message: types.Message):
    if message.chat.id != OWNER_ID:
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add @channel_username")
        return
    channels.add(args[1])
    await message.answer(f"–ö–∞–Ω–∞–ª {args[1]} –¥–æ–±–∞–≤–ª–µ–Ω!")

# –ö–æ–º–∞–Ω–¥–∞ /remove (—É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª)
@dp.message_handler(commands=["remove"])
async def remove_channel(message: types.Message):
    if message.chat.id != OWNER_ID:
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove @channel_username")
        return
    channels.discard(args[1])
    await message.answer(f"–ö–∞–Ω–∞–ª {args[1]} —É–¥–∞–ª–µ–Ω!")

# –ö–æ–º–∞–Ω–¥–∞ /channels (–ø–æ–∫–∞–∑–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã)
@dp.message_handler(commands=["channels"])
async def list_channels(message: types.Message):
    if message.chat.id != OWNER_ID:
        return
    if not channels:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
    else:
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä—è—Ç—Å—è –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(channels))

# –ö–æ–º–∞–Ω–¥–∞ /resend (–∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
@dp.message_handler(commands=["resend"])
async def change_publish_channel(message: types.Message):
    if message.chat.id != OWNER_ID:
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resend @your_channel")
        return
    global publish_channel
    publish_channel = args[1]
    await message.answer(f"–¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ {publish_channel}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
@dp.channel_post_handler()
async def new_post_handler(message: types.Message):
    if message.chat.username not in channels:
        return
    
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{message.message_id}"),
        InlineKeyboardButton("‚ùå –ù–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="dismiss")
    )
    await bot.send_message(OWNER_ID, f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –∏–∑ {message.chat.title}:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler()
async def callback_handler(callback: types.CallbackQuery):
    if callback.data.startswith("publish_"):
        message_id = callback.data.split("_")[1]
        original_message = await bot.forward_message(OWNER_ID, callback.message.chat.id, message_id)
        new_text = await rewrite_post(original_message.text)
        await bot.send_message(publish_channel, new_text)
        await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    elif callback.data == "dismiss":
        await callback.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT
async def rewrite_post(text):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "system", "content": "–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–≤ –Ω–µ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏"},
                  {"role": "user", "content": text}]
    )
    return response["choices"][0]["message"]["content"]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Webhook")

async def on_shutdown(dp):
    await bot.delete_webhook()

start_webhook(
    dispatcher=dp,
    webhook_path=WEBHOOK_PATH,
    on_startup=on_startup,
    on_shutdown=on_shutdown,
    skip_updates=True,
    host="0.0.0.0",
    port=PORT
)
